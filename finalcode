import base64
import boto3
import gzip
import json
import logging
import os
import ast

from botocore.exceptions import ClientError

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def logpayload(event):
    logger.setLevel(logging.DEBUG)
    logger.debug(event['awslogs']['data'])
    compressed_payload = base64.b64decode(event['awslogs']['data'])
    uncompressed_payload = gzip.decompress(compressed_payload)
    log_payload = json.loads(uncompressed_payload)
    return log_payload


def error_details(payload):
    error_msg = ""
    log_events = payload['logEvents']
    logger.debug(payload)
    loggroup = payload['logGroup']
    logstream = payload['logStream']
    lambda_func_name = loggroup.split('/')
    logger.debug(f'LogGroup: {loggroup}')
    logger.debug(f'Logstream: {logstream}')
    logger.debug(f'Function name: {lambda_func_name}')
    logger.debug(log_events)
    for log_event in log_events:
        error_msg += log_event['message']
    print("test1")
    print(error_msg) 
    customSubject=set([]) #no duplicates are allowed 
    List=error_msg.split("\n")
    errorSpecificMessage={}
    for error in List:
        if(len(error)>0):
            parseList=error.split("\t")
            if(len(parseList)>=4):
                #if(isinstance(parseList[3], dict)):
                if(parseList[3].find('{')==0):
                    subjectDict=ast.literal_eval(parseList[3])
                    if(isinstance(subjectDict, dict)):
                        errorCat=str(subjectDict['error']['error']['errorCategory'])
                        customSubject.add(errorCat)
                        if errorCat in errorSpecificMessage.keys():
                            errorSpecificMessage[errorCat].append(error)
                        else:
                            tempList=[]
                            tempList.append(error)
                            errorSpecificMessage[errorCat]=tempList
                    else:
                        customSubject.add(parseList[3])
                        errorSpecificMessage[str(parseList[3])]=error
                else:
                    customSubject.add(parseList[3])
                    errorSpecificMessage[parseList[3]]=error
            else:
                customSubject.add(str(lambda_func_name))
                errorSpecificMessage[str(lambda_func_name)]=error
        
        
        
        
        
        
        
    # parseList=List[0].split("\t")
    # customSubject=''
    # if(len(parseList)>=4):
    #     if(parseList[3].find('{')!=-1):
    #         subjectDict=ast.literal_eval(parseList[3])
    #         customSubject=subjectDict['error']['error']['errorCategory']
    #     else:
    #         customSubject=parseList[3]
    # else:
    #     customSubject=lambda_func_name
    
    print(customSubject)
    logger.debug('Message: %s' % error_msg.split("\n"))
    return loggroup, logstream, error_msg, lambda_func_name, customSubject ,errorSpecificMessage


def publish_message(loggroup, logstream, error_msg, lambda_func_name,customSubject,errorSpecificMessage):
    sns_arn = os.environ['snsARN']  # Getting the SNS Topic ARN passed in by the environment variables.
    snsclient = boto3.client('sns')
    try:
        for category, errorMsg in errorSpecificMessage.items():
            message = ""
            message += "\nLambda error  summary" + "\n\n"
            message += "##########################################################\n"
            message += "# LogGroup Name:- " + str(loggroup) + "\n"
            message += "# LogStream:- " + str(logstream) + "\n"
            message += "# Log Message:- " + "\n"
            #message += "# \n" + str(error_msg.split("\n")) + "\n"
            message += "# \n" + str(errorMsg) + "\n"
            
            message += "##########################################################\n"
            
            # Sending the notification...
            snsclient.publish(
                TargetArn=sns_arn,
                Subject=f'Application Logs - {category}',
                Message=message
            )
            
            
            
            
            
        
    except ClientError as e:
        logger.error("An error occured: %s" % e)


def lambda_handler(event, context):
    pload = logpayload(event)
    lgroup, lstream, errmessage, lambdaname, customSubject, errorSpecificMessage = error_details(pload)
    publish_message(lgroup, lstream, errmessage, lambdaname,customSubject,errorSpecificMessage)